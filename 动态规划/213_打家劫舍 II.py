'''
题目描述:
你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。
这个地方所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。
同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。

给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，
今晚能够偷窃到的最高金额。

 

示例 1：
输入：nums = [2,3,2]
输出：3
解释：你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。

示例 2：
输入：nums = [1,2,3,1]
输出：4
解释：你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。
     偷窃到的最高金额 = 1 + 3 = 4 。

示例 3：
输入：nums = [0]
输出：0
 

提示：
1 <= nums.length <= 100
0 <= nums[i] <= 1000
通过次数160,385提交次数370,487
'''

'''
解题思路:
dp[n] = max(dp[n-1], dp[n-2]+ cur_val)
但要考虑边界条件
    偷了第一个房子则不能偷最后一个房子, 于是变成两个子问题
    1. dp[2] = cur_val -> dp[n]_1 = max(dp[n-1], dp[n-2]+ cur_val)
    2. dp[2] = dp[1] -> dp[n]_2 = dp[n-1]
    return max(dp[n]_1, dp[n]_2)
    
'''
from typing import List


class Solution:
    def rob(self, nums: List[int]) -> int:
        k = len(nums)
        if k == 1:
            return nums[0]

        dp = [0]*(k+1)
        dp[1] = nums[0]

        # 第一种情况, 偷了第一个房子, 则不能偷最后一个房子
        dp[2] = dp[1]
        for i in range(2,k-1):
            n = i+1
            dp[n] = max(dp[n-1], dp[n-2]+nums[i])

        max_1 = dp[k-1]

        # 第二种情况, 没偷第一个房子, 则可以偷最后一个房子
        dp = [0] * (k + 1)
        dp[2] = nums[1]
        for i in range(2,k):
            n = i+1
            dp[n] = max(dp[n-1], dp[n-2]+nums[i])
        max_2 = dp[k]

        return max(max_1,max_2)